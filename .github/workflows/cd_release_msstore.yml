# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: Release (Microsoft Store)

on:
  push:
    branches:
      - release-microsoft-store

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    # ******************| ASSEMBLY AND MANIFEST VERSIONING |********************* #
    
    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v2
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable APP_VERSION $ver

    # Update the appxmanifest for Microsoft Store
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\MediaFileManager\PackageProject\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.Package.Identity.Name = $env:PackageIdentity_Name
        $manifest.Package.Identity.Publisher = $env:PackageIdentity_Publisher
        $manifest.Package.Properties.DisplayName = $env:PackageProperties_DisplayName
        $manifest.Package.Properties.PublisherDisplayName = $env:PackageProperties_PublisherDisplayName
        $manifest.Package.Applications.Application.VisualElements.DisplayName = $env:ApplicationVisualElements_DisplayName
        $manifest.save("src\MediaFileManager\PackageProject\Package.appxmanifest")
      env:
        PackageIdentity_Name: "61469LanceLotSoftware.MediaFileManager"
        PackageIdentity_Publisher: "CN=51B5A8B2-5D86-4826-BBE2-C92E963A4C02"
        PackageProperties_DisplayName: "Media File Manager"
        PackageProperties_PublisherDisplayName: "Lancelot Software"
        ApplicationVisualElements_DisplayName: "Media File Manager"

    # Updates the WPF project's assembly version number.
    - name: Update WPF Assembly version
      run: |
        function SetAssemblyFileVersion([string]$pathToFile, [string]$newVersion) {
          $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
            if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
              $verStart = $_.IndexOf("(")
              $verEnd = $_.IndexOf(")", $verStart)
              $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
              $newVersion = "$env:APP_VERSION"
              write-host "Setting AssemblyFileVersion from $origVersion to $newVersion"
              $_.Replace($origVersion, $newVersion)
            }  else {
              $_
            } 
          }
          $newfile | Set-Content $assemblyInfoPath -encoding "UTF8"
        }
        $assemblyInfoPath = "src\MediaFileManager\MediaFileManager.Desktop\Properties\AssemblyInfo.cs"
        SetAssemblyFileVersion $assemblyInfoPath $env:APP_VERSION

    # ******************| TOOL INSTALL and DEPENDENCY RESTORE |********************* #

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'
        include-prerelease: True

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Use dotnet restore command for the solution (see RIDs https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
    - name: DotNet Restore - Solution
      run: dotnet restore $env:SolutionPath --configfile $env:NugetConfigPath --runtime $env:RID
      env:
        TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
        TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
        SolutionPath: src\MediaFileManager\MediaFileManager.sln
        NugetConfigPath: src\nuget.config
        RID: win-x86 
        
    # In order to generate project.assets.json, we need to use nuget.exe for the wapproject
    - name: NuGet Restore - Wapp Project (to ensure assets.json is available)
      run: nuget restore $env:WappProject_Path -ConfigFile $env:NuGetConfig_Path
      env:
        NuGetConfig_Path: src\nuget.config
        TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
        TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
        WappProject_Path: src\MediaFileManager\PackageProject\PackageProject.wapproj
        
    # Restore NuGet packages using the nuget config (package sources authenticate using environment variable and nuget.config)
    - name: NuGet Restore - Solution
      run: dotnet restore $env:Solution_Path --configfile=$env:NuGetConfig_Path --runtime $env:RID
      env:
        RID: win-x86
        Solution_Path: src\MediaFileManager\MediaFileManager.sln
        NuGetConfig_Path: src\nuget.config
        TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }} # this env variable is used in the nuget.config
        TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }} # this env variable is used in the nuget.config

    # Restore the WPF application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Wpf_Project_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RID
      env:
        Configuration: Release
        RID: win-x86
        Wpf_Project_Path: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj

    # ************************| BUILD AND DISTRIBUTION |************************ #



    # Build using StoreUpload instructions, no code signing required (Microsoft signs it during certification)
    - name: Build wapproj for Microsoft Store
      run: msbuild $env:Solution_Path /p:AppxPackageDir=$env:AppxPackageDirectory /p:Platform=$env:UwpBundlePlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:AppxPackageSigningEnabled=$env:AppxPackageSigningEnabled
      env:
        Solution_Path: src\MediaFileManager\MediaFileManager.sln
        AppxPackageDirectory: D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\StoreUploadPackages\
        UwpBundlePlatform: x86 #package bundles, eg. x86|x64|arm|arm64
        Configuration: Release
        BuildMode: StoreUpload
        AppxBundle: Always
        AppxPackageSigningEnabled: False #microsoft signs a devcenter-submitted package
    
    # Use Store Broker to publish to Microsoft Store
    - name: Submit to Partner Center (aka DevCenter)
      shell: pwsh
      run: |
        $appxuploadPath = "D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\StoreUploadPackages\PackageProject_" + $env:APP_VERSION + "_" + $env:UwpBundlePlatform + "_bundle.msixupload"
        ./.scripts/SubmitToMsftStore.ps1 $appxuploadPath
      env:
        UwpBundlePlatform: x86 #package bundles, eg. x86|x64|arm|arm64
        PartnerCenterClientId: ${{ secrets.PARTNER_CENTER_CLIENT_ID }}
        PartnerCenterClientSecret: ${{ secrets.PARTNER_CENTER_CLIENT_SECRET }}
        PartnerCenterStoreId: 9PD3JFK7W5MB
        PartnerCenterTenantId: ${{ secrets.PARTNER_CENTER_TENANT_ID }}
