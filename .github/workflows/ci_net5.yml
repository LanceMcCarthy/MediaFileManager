# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: NET Core 5

on:
  push:
    branches:
      - netcore5

jobs:
  build:
    runs-on: windows-latest
    #runs-on: self-hosted

    env:
      StorePublisher: "CN=51B5A8B2-5D86-4826-BBE2-C92E963A4C02"
      PfxPublisher: "&quot;Lancelot Software, LLC&quot;, O=&quot;Lancelot Software, LLC&quot;, L=NORTH BILLERICA, S=Massachusetts, C=US"
      TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
      TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
      SolutionPath: src\MediaFileManager\MediaFileManager.sln
      WpfProjPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
      NugetConfigPath: src\nuget.config
      Configuration: Debug
      TargetPlatform: x64
      RID: win-x64 # https://docs.microsoft.com/en-us/dotnet/core/rid-catalog

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Download VS2019 Preview 16.8 Installer Shell
      run: |
        Write-Output 'Downloading installer'
        $client = new-object System.Net.WebClient
        $client.DownloadFile("https://dvlup.blob.core.windows.net/general-app-files/Installers/VS2019Preview/vs_community__547105323.1596228440.exe","D:\a\vs_community.exe")
        Write-Output 'Downloaded'

    - name: "Create VS2019 Preview Layout"
      shell: cmd
      run: |
        D:\a\vs_community.exe --layout c:\vslayout ^
        --add Microsoft.VisualStudio.Workload.NetCoreTools ^
        --add Microsoft.VisualStudio.Workload.Universal ^
        --add Microsoft.VisualStudio.Workload.ManagedDesktop ^
        --includeOptional --lang en-US --passive --norestart
# --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools ^
# --add Microsoft.VisualStudio.Workload.NetCoreBuildTools ^
# --add Microsoft.VisualStudio.Component.Windows10SDK.19041 ^
# --add Microsoft.VisualStudio.ComponentGroup.MSIX.Packaging ^
    
    - name: "Install VS2019 Preview from Layout"
      shell: cmd
      run: |
        c:\vslayout\vs_community.exe ^
        --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\" ^
        --add Microsoft.VisualStudio.Workload.NetCoreTools ^
        --add Microsoft.VisualStudio.Workload.Universal ^
        --add Microsoft.VisualStudio.Workload.ManagedDesktop ^
        --includeOptional --lang en-US --passive --norestart
# --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools ^
# --add Microsoft.VisualStudio.Workload.NetCoreBuildTools ^
# --add Microsoft.VisualStudio.Component.Windows10SDK.19041 ^
# --add Microsoft.VisualStudio.ComponentGroup.MSIX.Packaging ^
    
    # Add MsBuild to the PATH:
    - name: Add VS2019 Preview MSBuild to PATH
      run: |
        Write-Host "Checking VS2019 Installations..."
        ls "C:\Program Files (x86)\Microsoft Visual Studio\2019\"
        echo "::add-path::C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\msbuild.exe"
    
    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    # - name: Setup MSBuild.exe
    #   uses: microsoft/setup-msbuild@v1.0.1
    #   with:
    #     vs-version: '16.8'

    # Replace VSEnterprise MSBuild with VSPreview  in Path
    # - name: Replace MSBuild in Path
    #   run: |
    #     $vsEntBuildPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\"
    #     $vsPreviewBuildPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\"
    #     $env:Path.Replace($vsEntBuildPath, $vsPreviewBuildPath)
    
    # Install .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.100-preview.8.20417.9'

    # Restore packages, using nuget.config
    - name: NuGet Restore
      run: dotnet restore $env:SolutionPath --configfile $env:NugetConfigPath --runtime $env:RID
    
    # Restore WPF project
    - name: Restore the Wpf application to populate the obj folder
      run: msbuild $env:WpfProjPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RID
    
    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v1
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable UWP_VERSION $ver

    # *********| SideLoad & AppInstaller |********* #

    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.LancelotSoftwareCert_Base64 }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath src\MediaFileManager\PackageProject -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Update the appxmanifest for SideLoad (and signing with PFX)
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\MediaFileManager\PackageProject\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:UWP_VERSION"
        $manifest.Package.Identity.Name = "61469LanceLotSoftware.MediaFileManager"
        $manifest.Package.Identity.Publisher = "CN='Lancelot Software, LLC', O='Lancelot Software, LLC', L=NORTH BILLERICA, S=Massachusetts, C=US"
        $manifest.Package.Properties.DisplayName = "Media File Manager"
        $manifest.Package.Properties.PublisherDisplayName = "Lancelot Software"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "Media File Manager"
        $manifest.save("src\MediaFileManager\PackageProject\Package.appxmanifest")

    # NET5 SideLoad Build (including AppInstaller instructions)
    - name: Build wapproj for Sideloading
      run: msbuild $env:Solution_Path /p:GenerateAppInstallerFile=True /p:AppInstallerUri=$env:AppInstUri /p:HoursBetweenUpdateChecks=6 /p:AppxPackageDir=D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\SideLoadPackages\ /p:Platform=$env:UwpBundlePlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=$env:CertPrivateKey /p:PackageCertificateThumbprint=$env:CertThumbprint /p:AppxPackageSigningEnabled=$env:AppxPackageSigningEnabled
      env:
        AppxBundle: Always
        AppxPackageSigningEnabled: True
        GenerateAppInstallerFile: True
        BuildMode: SideloadOnly
        AppInstUri: https://dvlup.blob.core.windows.net/general-app-files/Installers/MediaFileManager_Net5/
      
    # UPLOAD TO AZURE STORAGE BLOB
    # This automatically distributes the sideLoad package, which users can visit the index.html page and run the appinstaller
    - name: Uploading appInstaller to Azure Blob
      id: sideload-blob-upload
      uses: LanceMcCarthy/Action-AzureBlobUpload@v1.7
      with:
        connection_string: ${{ secrets.AZURE_DVLUP_BLOB_CONNECTION_STRING }}
        container_name: general-app-files
        source_folder: src\MediaFileManager\PackageProject\SideLoadPackages\
        destination_folder: Installers/MediaFileManager_Net5
        clean_destination_folder: true
