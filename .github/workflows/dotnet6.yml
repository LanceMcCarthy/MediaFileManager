# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: .NET 6.0 Preview

on:
  push:
    branches:
      - dotnet-6.0

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v2
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable APP_VERSION $ver
    
    # ******************| TOOL INSTALL and DEPENDENCY RESTORE |********************* #

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '6.0.100-preview.3.21202.5'
    
    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '[16.9,16.10)'
    
    # Restore NuGet packages using the nuget config (package sources authenticate using environment variable and nuget.config)
    - name: NuGet Restore
      run: dotnet restore $env:Solution_Path --configfile=$env:NuGetConfig_Path --runtime $env:RID
      env:
        NuGetConfig_Path: src\nuget.config
        TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }} # this env variable is used in the nuget.config
        TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }} # this env variable is used in the nuget.config
        RID: win-x86
        Solution_Path: src\MediaFileManager\MediaFileManager.sln
        
    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:WpfProjectPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RID
      env:
        RID: win-x86
        Configuration: Release
        WpfProjectPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj

    # ************************| BUILD AND DISTRIBUTION |************************ #

    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.LancelotSoftwareCert_Base64 }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath src\MediaFileManager\PackageProject -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      env:
        SigningCertificate: LancelotSoftwareLLC.pfx # For UWP package signing
    
    # Update the appxmanifest for SideLoad (and signing with PFX)
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\MediaFileManager\PackageProject\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.Package.Identity.Name = $env:PackageIdentity_Name
        $manifest.Package.Identity.Publisher = $env:PackageIdentity_Publisher
        $manifest.Package.Properties.DisplayName = $env:PackageProperties_DisplayName
        $manifest.Package.Properties.PublisherDisplayName = $env:PackageProperties_PublisherDisplayName
        $manifest.Package.Applications.Application.VisualElements.DisplayName = $env:ApplicationVisualElements_DisplayName
        $manifest.save("src\MediaFileManager\PackageProject\Package.appxmanifest")
      env:
        PackageIdentity_Name: "61469LanceLotSoftware.MediaFileManager"
        PackageIdentity_Publisher: "CN='Lancelot Software, LLC', O='Lancelot Software, LLC', L=NORTH BILLERICA, S=Massachusetts, C=US"
        PackageProperties_DisplayName: "Media File Manager"
        PackageProperties_PublisherDisplayName: "Lancelot Software"
        ApplicationVisualElements_DisplayName: "Media File Manager"
    
    # Updates the WPF project's assembly version number.
    - name: Update WPF Assembly version
      run: |
        function SetAssemblyFileVersion([string]$pathToFile, [string]$newVersion) {
          $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
            if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
              $verStart = $_.IndexOf("(")
              $verEnd = $_.IndexOf(")", $verStart)
              $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
              $newVersion = "$env:APP_VERSION"
              write-host "Setting AssemblyFileVersion from $origVersion to $newVersion"
              $_.Replace($origVersion, $newVersion)
            }  else {
              $_
            } 
          }
          $newfile | Set-Content $assemblyInfoPath -encoding "UTF8"
        }
        $assemblyInfoPath = "src\MediaFileManager\MediaFileManager.Desktop\Properties\AssemblyInfo.cs"
        SetAssemblyFileVersion $assemblyInfoPath $env:APP_VERSION
    
    # Build using SideLoad and AppInstaller instructions (requires code signing)
    - name: Build wapproj for Sideloading
      run: msbuild $env:Solution_Path /p:GenerateAppInstallerFile=$env:GenerateAppInstallerFile /p:AppInstallerUri=$env:AppInstUri /p:HoursBetweenUpdateChecks=6 /p:AppxPackageDir=$env:AppxPackageDir /p:Platform=$env:UwpBundlePlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=$env:CertPrivateKey /p:PackageCertificateThumbprint=$env:CertThumbprint /p:AppxPackageSigningEnabled=$env:AppxPackageSigningEnabled
      env:
        AppxPackageDir: D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\SideLoadPackages\
        AppxBundle: Always
        AppxPackageSigningEnabled: True
        GenerateAppInstallerFile: True
        BuildMode: SideloadOnly
        AppInstUri: https://dvlup.blob.core.windows.net/general-app-files/Installers/MediaFileManager_Net60/
        UwpBundlePlatform: x86 #package bundles, eg. x86|x64|arm|arm64
        Solution_Path: src\MediaFileManager\MediaFileManager.sln
        Configuration: Release
        SigningCertificate: LancelotSoftwareLLC.pfx
        CertPrivateKey: ${{ secrets.LancelotSoftwareCert_Key }}  # For UWP package signing
        CertThumbprint: ${{ secrets.LancelotSoftwareCert_Thumbprint }} # For UWP package signing
      
    # UPLOAD TO AZURE STORAGE BLOB
    # This automatically distributes the sideLoad package, which users can visit the index.html page and run the appinstaller
    - name: Uploading appInstaller to Azure Blob
      id: sideload-blob-upload
      uses: LanceMcCarthy/Action-AzureBlobUpload@v1.8.3
      with:
        connection_string: ${{ secrets.AZURE_DVLUP_BLOB_CONNECTION_STRING }}
        container_name: general-app-files
        source_folder: src\MediaFileManager\PackageProject\SideLoadPackages\
        destination_folder: Installers/MediaFileManager_Net60
        clean_destination_folder: true
        is_recursive: true

    # ZIP up the sideload packages for GitHub release using Powershell
    - name: Create SideLoadPackages.zip
      run: Compress-Archive -Path D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\SideLoadPackages\* -DestinationPath D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\SideLoadPackages\SideLoadPackages.zip

    # Remove the .pfx now that we're done with code signing
    - name: Remove the .pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:SigningCertificate
      env:
        Wap_Project_Directory: src\MediaFileManager\PackageProject
        SigningCertificate: LancelotSoftwareLLC.pfx

    # ************************| GITHUB RELEASE |************************ #

    # Create a new GitHub Release tagged with the build version number (via https://github.com/actions/create-release)
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ env.APP_VERSION }}-net6.0
        release_name: Media File Manager v.${{ env.APP_VERSION }} - .NET 6.0 Preview
        draft: false
        prerelease: true
        body_path: .github\other\preview_releasebody.md

    # Add SideLoad artifacts to GitHub Release (via https://github.com/actions/upload-release-asset)
    - name: Uploading SideLoad Release asset
      id: upload-sideload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\SideLoadPackages\SideLoadPackages.zip
        asset_name: SideLoadPackages.zip
        asset_content_type: application/zip
