# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: Main

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    env:
      CERTIFICATE_FILENAME: LancelotSoftwareLLC.pfx
      TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
      TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
      Actions_Allow_Unsecure_Commands: true # so we can set environment variable at the job level
      WpfProjectPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
      UwpProjectPath: src\MediaFileManager\PackageProject\PackageProject.wapproj
      RID: win-x86 # https://docs.microsoft.com/en-us/dotnet/core/rid-catalog
      TargetPlatform: x86
      Configuration: Debug
      BuildMode: CI
      AppxPackageSigningEnabled: False
      AppxBundle: Never

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v2
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable APP_VERSION $ver

    # Update the UWP package version
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\MediaFileManager\PackageProject\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.save("src\MediaFileManager\PackageProject\Package.appxmanifest")
    
    - name: Update WPF Assembly version
      run: |
        $buildYear = Get-Date -Format "yyyy"
        $buildMonthDay = Get-Date -Format "Mdd"

        $pathToFile = "src\MediaFileManager\MediaFileManager.Desktop\Properties\AssemblyInfo.cs"
        $majorVer = $buildYear
        $minorVer = $buildMonthDay
        $buildVer = $env:GITHUB_RUN_NUMBER
        $revVer = "0"
        
        $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
          if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
            $verStart = $_.IndexOf("(")
            $verEnd = $_.IndexOf(")", $verStart)
            $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
            
            $segments=$origVersion.Split(".")
            
            #default values for each segment
            $v1="1"
            $v2="0"
            $v3="0"
            $v4="0"
            
            #assign them based on what was found
            if ($segments.Length -gt 0) { $v1=$segments[0] }
            if ($segments.Length -gt 1) { $v2=$segments[1] } 
            if ($segments.Length -gt 2) { $v3=$segments[2] } 
            if ($segments.Length -gt 3) { $v4=$segments[3] } 
            
            $v1 = AssignVersionValue $v1 $majorVer
            $v2 = AssignVersionValue $v2 $minorVer
            $v3 = AssignVersionValue $v3 $buildVer
            $v4 = AssignVersionValue $v4 $revVer
            
            if ($v1 -eq $null) { throw "Major version CANNOT be blank!" }
            if ($v2 -eq $null) { throw "Minor version CANNOT be blank!" }
            
            $newVersion = "$v1.$v2"
            
            if ($v3 -ne $null) {
                $newVersion = "$newVersion.$v3"
                
                if ($v4 -ne $null) {
                    $newVersion = "$newVersion.$v4"
                }
            }

            write-host "$msgPrefix Setting AssemblyFileVersion to $newVersion"
            $_.Replace($origVersion, $newVersion)
          } else {
            $_
          }
        }
        $newfile | set-Content $assemblyInfoPath -encoding "UTF8"

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '5.0.x'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '[16.8,16.9)'

    - name: NuGet Restore
      run: dotnet restore src\MediaFileManager\MediaFileManager.sln --configfile src\nuget.config --runtime $env:RID

    # Restore WPF project
    - name: Build the Wpf application to populate the obj folder
      run: msbuild $env:WpfProjectPath /t:Restore /p:Configuration=Debug /p:RuntimeIdentifier=$env:RID

    # Build the WAP project
    - name: Build the Windows Application Packaging Project (wapproj) 
      run: msbuild $env:UwpProjectPath /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:AppxPackageSigningEnabled=$env:AppxPackageSigningEnabled 
