# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: Development

on:
  push:
    branches:
      - main-dev
    paths:
      - "src/**/*"
      - ".github/workflows/ci_dev.yml"

jobs:
  build_dev:
    runs-on: windows-latest
    env:
      TFM: net7.0-windows10.0.22621.0
      RID: win-x64
      CommonProjectPath: src\MediaFileManager\MediaFileManager.Common\MediaFileManager.Common.csproj
      WpfProjectPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
      SolutionPath: src\MediaFileManager\MediaFileManager.sln
      UwpProjectPath: src\MediaFileManager\PackageProject\PackageProject.wapproj
      NugetConfigPath: src\nuget.config
      Configuration: Debug
      TELERIK_NUGET_KEY: ${{ secrets.TELERIK_NUGET_KEY }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    # Install the .NET 6 workload
    - name: Install .NET 6
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0'

    # Add msbuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Use dotnet restore command for the solution (see RIDs https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
    - name: DotNet Restore
      run: dotnet restore ${{ env.SolutionPath }} --configfile ${{ env.NugetConfigPath }} --runtime ${{ env.RID }}

    # Restore class library project to populate the obj folder
    - name: Build the Class library
      run: msbuild ${{ env.CommonProjectPath }} /t:Restore /p:Configuration=${{ env.Configuration }} /p:RuntimeIdentifier=${{ env.RID }}

    # Restore WPF project to populate the obj folder
    - name: Build the Wpf project
      run: msbuild ${{ env.WpfProjectPath }} /t:Restore /p:Configuration=${{ env.Configuration }} /p:RuntimeIdentifier=${{ env.RID }}

    # In order to generate project.assets.json, we need to use nuget.exe for the wapproject
    - name: NuGet Restore Wapp Project (to ensure assets.json is available)
      run: nuget restore ${{ env.UwpProjectPath }} -ConfigFile ${{ env.NugetConfigPath }}

    # skip WAP build in CI-dev workflow
    # Build the WAP project. BuildMode is set to CI so we do not have to generate actual packages.
    # - name: Build the Windows Application Packaging Project (wapproj) 
    #   run: msbuild ${{ env.UwpProjectPath }} /p:Configuration=${{ env.Configuration }} /p:Platform=${{ env.TargetPlatform }} /p:UapAppxPackageBuildMode=${{ env.BuildMode }} /p:AppxBundle=${{ env.AppxBundle }} /p:AppxPackageSigningEnabled=${{ env.AppxPackageSigningEnabled }} /p:GenerateAppInstallerFile=${{ env.GenerateAppInstallerFile }}
    #   env:
    #     TargetPlatform: x64
    #     BuildMode: CI
    #     AppxBundle: Never
    #     AppxPackageSigningEnabled: False
    #     GenerateAppInstallerFile: False
