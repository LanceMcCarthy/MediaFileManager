# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: Development

on:
  workflow_dispatch:
  push:
    branches:
      - main-dev
    paths:
      - "src/**/*"
      - ".github/workflows/ci_dev.yml"

jobs:
  build_dev:
    runs-on: windows-latest
    env:
      TFM: net8.0-windows10.0.19041.0
      WpfProjectPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
      WappProjectPath: src\MediaFileManager\PackageProject\PackageProject.wapproj
      SolutionPath: src\MediaFileManager\MediaFileManager.sln
      UwpProjectPath: src\MediaFileManager\PackageProject\PackageProject.wapproj
      AppxBundlePlatforms: "x86|x64|arm64"
      TargetPlatform: "x64"
      AppxBundleMode: Never
      AppxBuildMode: CI
      NugetConfigPath: src\nuget.config
      Configuration: Debug
      AppxPackageSigningEnabled: False
      GenerateAppInstallerFile: False
      TELERIK_NUGET_KEY: ${{secrets.TELERIK_NUGET_KEY}}
      TELERIK_LICENSE: ${{secrets.TELERIK_LICENSE_KEY}}
    
    steps:
    # - name: Generate version number with date and workflow Run Number
    #   id: version-creator
    #   run: |
    #     $buildDay = Get-Date -Format "yyyy.Mdd"
    #     $runNumber = "$env:GITHUB_RUN_NUMBER"
    #     $ver = $buildDay + "." + $runNumber + ".0"
    #     echo "APP_VERSION=$ver"
    #     echo "APP_VERSION_OUTPUT=$ver" >> $GITHUB_OUTPUT
    #     echo "APP_VERSION_VAR=$ver" >> $GITHUB_ENV
    #     echo "::set-output name=APP_VERSION::$ver"

    # - name: verify outputs and vars
    #   run: |
    #     echo "Output (using environment file): ${{steps.version-creator.outputs.APP_VERSION_OUTPUT}}"
    #     echo "Env Var (using environment file): ${{env.APP_VERSION_VAR}}"
    #     echo "Output (using deprecated set-output): ${{steps.version-creator.outputs.APP_VERSION}}"

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Install the .NET SDK workload
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'

    # Add msbuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.3.2

    # Use dotnet restore command for the solution (see RIDs https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
    - name: DotNet Restore
      run: dotnet restore ${{env.WappProjectPath}} --configfile ${{env.NugetConfigPath}} --runtime ${{env.TFM}}

    # We're not building the MSIX package, no need for wasting time and CPU cycles for quick dev build
    - name: Build the Windows Application Packaging Project (wapproj) 
      run: msbuild ${{env.WappProjectPath}} /t:Restore /p:Configuration=${{env.Configuration}} /p:Platform=${{env.TargetPlatform}} /p:UapAppxPackageBuildMode=${{env.AppxBuildMode}} /p:AppxBundle=${{env.AppxBundleMode}} /p:AppxPackageSigningEnabled=${{env.AppxPackageSigningEnabled}} /p:GenerateAppInstallerFile=${{env.GenerateAppInstallerFile}} /p:AppxBundlePlatforms="${{env.AppxBundlePlatforms}}"