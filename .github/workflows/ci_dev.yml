# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: Development

on:
  push:
    branches:
      - main-dev

jobs:
  build:
    runs-on: windows-2022
    env:
      Actions_Allow_Unsecure_Commands: true # Allows job-wide variables
      RID: win-x64
      Platform: x86
      TFM: net6.0-windows10.0.18362.0
      Config: Release
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v2
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable APP_VERSION $ver

    # Update the UWP package version
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\MediaFileManager\PackageProject\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.save("src\MediaFileManager\PackageProject\Package.appxmanifest")
    
    # Updates the WPF project's assembly version number.
    - name: Update WPF Assembly version
      run: |
        function SetAssemblyFileVersion([string]$pathToFile, [string]$newVersion) {
          $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
            if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
              $verStart = $_.IndexOf("(")
              $verEnd = $_.IndexOf(")", $verStart)
              $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
              $newVersion = "$env:APP_VERSION"
              write-host "Setting AssemblyFileVersion from $origVersion to $newVersion"
              $_.Replace($origVersion, $newVersion)
            }  else {
              $_
            } 
          }
          $newfile | Set-Content $assemblyInfoPath -encoding "UTF8"
        }
        $assemblyInfoPath = "src\MediaFileManager\MediaFileManager.Desktop\Properties\AssemblyInfo.cs"
        SetAssemblyFileVersion $assemblyInfoPath $env:APP_VERSION

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.LancelotSoftwareCert_Base64 }}")
        $currentDirectory = Get-Location
        $certificatePath = "src\MediaFileManager\LancelotSoftwareLLC.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Use dotnet restore command for the solution (see RIDs https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
    - name: Use dotnet restore
      run: dotnet restore $env:ProjectPath --configfile $env:NugetConfigPath --runtime $env:Runtime
      env:
        TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
        TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
        ProjectPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
        NugetConfigPath: src\nuget.config
        Runtime: ${{ env.RID }}

    # Restore using msbuild to restore the obj folder with platform specific
    - name: USe msbuild Restore
      run: msbuild.exe $env:ProjectPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:Runtime /p:Platform=$env:TargetPlatform
      env:
        TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
        TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
        ProjectPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
        Runtime: ${{ env.RID }}
        TargetPlatform: ${{ env.Platform }}
        Configuration: ${{ env.Config }}

    # Single project MSIX can build and product MSIX package the WPF at the same (see RIDs https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
    # output will be src\MediaFileManager\MediaFileManager.Desktop\bin\x64\Release\net6.0-windows10.0.18362.0\win-x64\AppPackages\MediaFileManager.Desktop_2021.722.1.0_Test
    - name: Build the Wpf application to populate the obj folder
      run: msbuild $env:ProjectPath /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RID /p:Platform=$env:TargetPlatform /p:GenerateAppxPackageOnBuild=$env:GenerateMsix /p:UapAppxPackageBuildMode=$env:BuildMode /p:PackageCertificateKeyFile=$env:CertFilePath /p:PackageCertificatePassword=$env:CertPrivateKey /p:PackageCertificateThumbprint=$env:CertThumbprint /p:AppxPackageSigningEnabled=$env:AppxPackageSigningEnabled
      env:
        ProjectPath: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
        CertFilePath: src\MediaFileManager\LancelotSoftwareLLC.pfx
        CertPrivateKey: ${{ secrets.LancelotSoftwareCert_Key }}
        CertThumbprint: ${{ secrets.LancelotSoftwareCert_Thumbprint }}
        Configuration: ${{ env.Config }}
        RID: ${{ env.RID }}
        TargetPlatform: ${{ env.Platform }}
        BuildMode: SideLoadOnly
        AppxPackageSigningEnabled: true
        GenerateMsix: true

    # ZIP up the sideload packages for GitHub release using Powershell
    - name: Create SideLoadPackages.zip
      run: Compress-Archive -Path $env:source_path -DestinationPath $env:dest_path
      env:
        source_path: D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\MediaFileManager.Desktop\bin\${{ env.Platform }}\Release\${{ env.TFM }}\${{ env.RID }}\AppPackages\MediaFileManager.Desktop_${{ env:APP_VERSION }}_Test\*
        dest_path: D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\Packages\_${{ env.TFM }}\${{ env.RID }}\SideLoadPackages.zip

    # Add SideLoad artifacts to GitHub Release (via https://github.com/actions/upload-release-asset)
    - name: Uploading MSIX
      id: upload-msix
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\Packages\_${{ env.TFM }}\${{ env.RID }}\SideLoadPackages.zip
        asset_name: SideLoadPackages_${{ env.TFM }}_${{ env.RID }}.zip
        asset_content_type: application/zip
