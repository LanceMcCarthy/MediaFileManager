# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

name: WPF CD

on:
  push:
    branches:
      - releases
    tags:
      - '*'

jobs:
  build:
    strategy:

    # The following build matrix allows builds across multiple configurations (Debug and Release) and production environments such as
    # development, production for sideload applications and production for the Microsoft store.
    # For more information, see https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
      matrix:
        channel: [Prod_Sideload, Prod_Store]
        targetPlatform: [x86]
        include:

          # includes the following variables for the matrix leg matching Prod_Sideload
          - channel: Prod_Sideload
            Configuration: Release
            ChannelName: Prod_Sideload
            DistributionUrl: https://lancemccarthy.github.io/MediaFileManager/
            MsixPackageId: 61469LanceLotSoftware.MediaFileManager
            MsixPublisherId: CN=51B5A8B2-5D86-4826-BBE2-C92E963A4C02
            MsixPublisherDisplayName: Lancelot Software
            MsixPackageDisplayName: Media File Manager (ProdSideload)

          # includes the following variables for the matrix leg matching Prod_Store
          - channel: Prod_Store
            Configuration: Release
            ChannelName: Prod_Store
            DistributionUrl: ''
            MsixPackageId: 61469LanceLotSoftware.MediaFileManager
            MsixPublisherId: CN=51B5A8B2-5D86-4826-BBE2-C92E963A4C02
            MsixPublisherDisplayName: Lancelot Software
            MsixPackageDisplayName: Media File Manager

    runs-on: windows-latest

    env:
      SigningCertificate: LancelotSoftwareLLC.pfx
      NuGetConfig_Path: src\nuget.config
      Solution_Path: src\MediaFileManager\MediaFileManager.sln
      Wpf_Project_Path: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
      Wap_Project_Directory: src\MediaFileManager\PackageProject
      Wap_Project_Name: PackageProject.wapproj
      TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
      TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
      CertPrivateKey: ${{ secrets.LancelotSoftwareCert_Key }}
      CertThumbprint: ${{ secrets.LancelotSoftwareCert_Thumbprint }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v1
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable UWP_VERSION $ver

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0

    # Update the appxmanifest before build by setting the per-channel values set in the matrix such as
    # the Package.Identity.Version or the Package.Identity.Name, which allows multiple channels to be built.
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\MediaFileManager\PackageProject\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:UWP_VERSION"
        $manifest.Package.Identity.Name = "${{ matrix.MsixPackageId }}"
        $manifest.Package.Identity.Publisher = "${{ matrix.MsixPublisherId }}"
        $manifest.Package.Properties.DisplayName = "${{ matrix.MsixPackageDisplayName }}"
        $manifest.Package.Properties.PublisherDisplayName = "${{ matrix.MsixPublisherDisplayName }}"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "${{ matrix.MsixPackageDisplayName }}"
        $manifest.save("src\MediaFileManager\PackageProject\Package.appxmanifest")
        
    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.LancelotSoftwareCert_Base64 }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath src\MediaFileManager\PackageProject -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Restore NuGet packages using the nuget config (private server uses credentials from secrets)
    - name: NuGet Restore
      run: dotnet restore $env:Solution_Path --configfile=$env:NuGetConfig_Path --runtime win-${{ matrix.targetplatform }}
   
   # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{ matrix.Configuration }}
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    # Build the Windows Application Packaging project for Prod_Sideload
    - name: Build the Windows Application Packaging Project (wapproj) for ${{ matrix.ChannelName }}
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=$env:CertPrivateKey /p:PackageCertificateThumbprint=$env:CertThumbprint
      if: matrix.ChannelName == 'Prod_Sideload'
      env:
        AppxBundle: Always
        GenerateAppInstallerFile: True
        AppInstallerUri: ${{ matrix.DistributionUrl }}
        BuildMode: SideloadOnly
        Configuration: ${{ matrix.Configuration }}
        TargetPlatform: ${{ matrix.targetplatform }}
        
    # Build the Windows Application Packaging project for Prod_Store
    - name: Build the Windows Application Packaging Project (wapproj) for ${{ matrix.ChannelName }}
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=$env:CertPrivateKey /p:PackageCertificateThumbprint=$env:CertThumbprint
      if: matrix.ChannelName == 'Prod_Store'
      env:
        AppxBundle: Always
        AppxPackageSigningEnabled: True
        BuildMode: StoreUpload
        Configuration: ${{ matrix.Configuration }}
        GenerateAppInstallerFile: False
        TargetPlatform: ${{ matrix.targetplatform }}

    # Remove the .pfx
    - name: Remove the .pfx
      run: Remove-Item -path src\MediaFileManager\PackageProject\$env:SigningCertificate

    # Archive the package
    - name: Create archive
      run: Compress-Archive -Path src\MediaFileManager\PackageProject\AppPackages\* -DestinationPath src\MediaFileManager\PackageProject\AppPackages\AppPackages.zip
    
    # Prepare tag and release names
    - uses: Amadevus/pwsh-script@v1
      id: preprelease
      with:
        script: |
          $dateprefix = Get-Date -Format "yyyy.Mdd"
          $uwpManifestVersion = $dateprefix + "." + $env:GITHUB_RUN_NUMBER + ".0"
          $releasename = $uwpManifestVersion + "." + ${{matrix.ChannelName}} + "." + ${{ matrix.targetplatform }}
          Set-ActionVariable RELEASE_VERSION $releasename
          
    # Create the release:  https://github.com/actions/create-release
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: $env:RELEASE_VERSION
        release_name: $env:RELEASE_VERSION
        draft: false
        prerelease: false
        body: This is the ${{matrix.ChannelName}} package for ${{ matrix.targetplatform }}

    # Upload release asset:   https://github.com/actions/upload-release-asset
    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: src\MediaFileManager\PackageProject\AppPackages\AppPackages.zip
        asset_name: AppPackages.zip
        asset_content_type: application/zip
