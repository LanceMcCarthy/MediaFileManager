# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: WPF CD

on:
  push:
    branches:
      - releases

jobs:
  build:
    runs-on: windows-latest

    env:
      Configuration: Release
      UwpPlatformBundle: x86|x64|arm|arm64
      SigningCertificate: LancelotSoftwareLLC.pfx
      NuGetConfig_Path: src\nuget.config
      Solution_Path: src\MediaFileManager\MediaFileManager.sln
      Wpf_Project_Path: src\MediaFileManager\MediaFileManager.Desktop\MediaFileManager.Desktop.csproj
      Wap_Project_Directory: src\MediaFileManager\PackageProject
      Wap_Project_Name: PackageProject.wapproj
      TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
      TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
      CertPrivateKey: ${{ secrets.LancelotSoftwareCert_Key }}
      CertThumbprint: ${{ secrets.LancelotSoftwareCert_Thumbprint }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - name: Generate version number
      uses: Amadevus/pwsh-script@v1
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable UWP_VERSION $ver

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0

    # Update the appxmanifest with the new verison number, app identity and publisher details.
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\MediaFileManager\PackageProject\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:UWP_VERSION"
        $manifest.Package.Identity.Name = "61469LanceLotSoftware.MediaFileManager"
        $manifest.Package.Identity.Publisher = "CN=51B5A8B2-5D86-4826-BBE2-C92E963A4C02"
        $manifest.Package.Properties.DisplayName = "Media File Manager"
        $manifest.Package.Properties.PublisherDisplayName = "Lancelot Software"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "Media File Manager"
        $manifest.save("src\MediaFileManager\PackageProject\Package.appxmanifest")
        
    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.LancelotSoftwareCert_Base64 }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath src\MediaFileManager\PackageProject -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Restore NuGet packages using the nuget config (private server uses credentials from secrets)
    - name: NuGet Restore
      run: dotnet restore $env:Solution_Path --configfile=$env:NuGetConfig_Path
   
   # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        RuntimeIdentifier: any  #RIDs reference https://github.com/dotnet/runtime/blob/master/src/libraries/pkg/Microsoft.NETCore.Platforms/readme.md

    # Build the Windows Application Packaging project for Sideload
    - name: Build wapproj for Sideloading
      run: msbuild $env:Solution_Path /p:AppxPackageDir=$env:PackagesDir /p:Platform=$env:UwpPlatformBundle /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=$env:CertPrivateKey /p:PackageCertificateThumbprint=$env:CertThumbprint
      env:
        AppxBundle: Always
        GenerateAppInstallerFile: True
        AppInstallerUri: https://lancemccarthy.github.io/MediaFileManager/
        BuildMode: SideloadOnly
        PackagesDir: src\MediaFileManager\PackageProject\AppPackages\Sideload\
      
    # Build the Windows Application Packaging project for Store
    - name: Build wapproj for Microsoft Store
      run: msbuild $env:Solution_Path /p:AppxPackageDir=$env:PackagesDir /p:Platform=$env:UwpPlatformBundle /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=$env:CertPrivateKey /p:PackageCertificateThumbprint=$env:CertThumbprint
      env:
        AppxBundle: Always
        AppxPackageSigningEnabled: True
        BuildMode: StoreUpload
        GenerateAppInstallerFile: False
        PackagesDir: src\MediaFileManager\PackageProject\AppPackages\StoreUpload\

    # Remove the .pfx now that we're done signing
    - name: Remove the .pfx
      run: Remove-Item -path src\MediaFileManager\PackageProject\$env:SigningCertificate
    
    # Create the release: https://github.com/actions/create-release
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ env.UWP_VERSION }}
        release_name: Media File Manager v.${{ env.UWP_VERSION }}
        draft: false
        prerelease: false
        body: This release contains both SideLoad AppInstaller and StoreUpload app packages for v.${{ env.UWP_VERSION }} of Media File Manager.

    # ZIP up the sideload packages using Powershell
    - name: Create SideLoadPackages.zip
      run: Compress-Archive -Path src\MediaFileManager\PackageProject\AppPackages\Sideload\* -DestinationPath src\MediaFileManager\PackageProject\AppPackages\SideLoadPackages.zip
      
    # Upload release asset: https://github.com/actions/upload-release-asset
    - name: Uploading SideLoad Release asset
      id: upload-sideload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src\MediaFileManager\PackageProject\AppPackages\SideLoadPackages.zip
        asset_name: SideLoadPackages.zip
        asset_content_type: application/zip

     # ZIP up the store upload packages using Powershell
    - name: Create StoreUploadPackages.zip
      run: Compress-Archive -Path src\MediaFileManager\PackageProject\AppPackages\StoreUpload\* -DestinationPath src\MediaFileManager\PackageProject\AppPackages\StoreUploadPackages.zip
        
    # Upload release asset: https://github.com/actions/upload-release-asset
    - name: Uploading StoreUpload Release asset
      id: upload-storeupload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src\MediaFileManager\PackageProject\AppPackages\StoreUploadPackages.zip
        asset_name: StoreUploadPackages.zip
        asset_content_type: application/zip
